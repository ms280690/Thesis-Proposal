\@doanenote {1}
macro:->``\textit
{\progLang
{Prolog}
like}''
should
be
hyphenated
as
\text
{\progLang
{Prolog}-like}
when
used
as
an
adjective,
as
here.

\par\endgroup
\@doanenote {2}
macro:->Do
you
mean
``test''?

\par\endgroup
\@doanenote {3}
macro:->and
so
on.

\par\endgroup
\@doanenote {4}
macro:->what
does
this
reference?

\par\endgroup
\@doanenote {5}
macro:->Decide
on
a
convention
for
capitals.

\par\endgroup
\@doanenote {6}
macro:->You
might
want
to
add
words
before
some
references.
For
instance
\begin
{quote}\itshape
To
replicate
\progLang
{Prolog}
we
look
into
how
it
works
\cite
{webiste:learnprolognow}.
\end
{quote}
is
probably
better
as
\begin
{quote}\slshape
To
replicate
\progLang
{Prolog}
we
look
into
how
it
works
\enparen
{see,
for
instance,
\textup
{\cite
{webiste:learnprolognow}}}.
\end
{quote}

\par\endgroup
\@doanenote {7}
macro:->``i.e.''
is
missing
the
final
period.
Secondly,
``\textit
{where
two
terms
need
to
be
unified
that
is
searching}''
doesn't
read
well
because
it
is
missing
commas.
Check
that
latin
abbreviations
read
correctly
when
replaced
with
English
words.

\par\endgroup
\@doanenote {8}
macro:->I've
tidied
up
a
bit
here.
See
if
this
reads
more
clearly.
I've
also
removed
a
comment.\newline
(Commit
\textsf
{\bfseries
fe997de\-08bda2\-64c453\-204e97\-1a1cfd\-219457acf}).

\par\endgroup
\@doanenote {9}
macro:->``non
recursive''
is
hyphenated.

\par\endgroup
\@doanenote {10}
macro:->Why
is
unification
capitalized?

\par\endgroup
\@doanenote {11}
macro:->
\david
{Why
do
we
need
the
following
two
paragraphs?}\newline
\mehul
{To
talk
about
the
type
systems
of
the
languages}

\par\endgroup
\@doanenote {12}
macro:->Drop
the
``would''s
here.
We
\textit
{do}
need
to
define
a
\progLang
{Prolog}
type.

\par\endgroup
\@doanenote {13}
macro:->Are
you
sure
about
the
type
below?
This
seems
to
me
to
be
confusing
\progLang
{Prolog}
lists
with
\progLang
{Haskell}
lists.

\par\endgroup
\@doanenote {14}
macro:->What
do
you
mean
by
``primitives
of
the
language''?
Adopted
from
\cite
{website:understandingalgebrasfpcomplete}

\par\endgroup
\@doanenote {15}
macro:->You
have
`\textit
{FlatTerm}'
and
`"FlatTerm"'.
Why
not
\texttt
{FlatTerm}
or
better
yet
\texttt
{\csname
@backslashchar\endcsname
code\{FlatTerm\}},
where
\texttt
{\csname
@backslashchar\endcsname
code}
is
a
macro
you
define.

\par\endgroup
\@doanenote {16}
macro:->Why
do
we
explain
\textit
{kinds}?
Is
this
in
preparation
for
\texttt
{\bfseries
Functor}?
\mehul
{Well
Int,
String
etc
etc
are
kinds
in
haskell
so
a
FlatTerm
int
where
int
is
*}

\par\endgroup
\@doanenote {17}
macro:->Even
if
entered
correctly,
an
en-dash
is
not
appropriate
here.

\par\endgroup
\@doanenote {18}
macro:->\david
{Why
do
you
need
to
discuss
value
fixed
points
(\textit
{i.e.,}
\texttt
{\bfseries
fix})?
Do
you
need
them?}
\par
\mehul
{Well
not
really
but
since
we
are
talking
about
fixed
point
in
general}
\par
\david
{Get
rid
of
it.
Put
in
a
marker
if
you
want.
If
we
really
need
it,
we
can
drag
it
from
the
git
repository.}

\par\endgroup
\@doanenote {19}
macro:->The
``is''
seems
mispaced.

\par\endgroup
\@doanenote {20}
macro:->\par

\par\endgroup
\@doanenote {21}
macro:->This
sentence
can
be
simplified,
I
think.
\par\endgroup
\@doanenote {22}
macro:->I
am
deeply
suspicious
of
the
instance
for
\texttt
{Applicative}
given.
\par
\mehul
{I
agree,
I
think
I
just
created
one
for
the
purpose
of
the
diagram.}

\par\endgroup
\@doanenote {23}
macro:->In
this
immediate
region,
I
(dgc)
removed
text
inserted
by
a
failed
push
or
pull
merge.
Check
to
see
that
it
is
correct,
or
reverse
commit
\texttt
{95804e3\dots
}.

\par\endgroup
