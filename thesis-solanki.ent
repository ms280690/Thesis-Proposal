\@doanenote {1}
macro:->This
sentence
wanders
off.
Remove
it?
Or
complete
it.
\mehul
{Removed}

\par\endgroup
\@doanenote {2}
macro:->\david
{What
style
guide
are
you
using
to
determine
capitalization?}\newline
\mehul
{none
at
the
moment
but
I
will
change
certain
capitals
to
small}

\par\endgroup
\@doanenote {3}
macro:->The
first
character
of
flaws
was
\\u\(+\)fb02
(an
FL-ligature),
which
makes
me
think
that
this
text
was
cut
and
pasted.
\mehul
{I
do
not
understand}

\par\endgroup
\@doanenote {4}
macro:->Say
more
here?
This
seems
like
a
natural
place
to
have
more
high-level
comments
on
where
the
thesis
is
going.

\par\endgroup
\@doanenote {5}
macro:->Rewrite
as
two
sentences.

\par\endgroup
\@doanenote {6}
macro:->\david
{I
have
the
feeling
that
you
should
introduce
the
concept
of
DSLs
slightly
higher.}
\mehul
{higher
???}
\david
{Earlier.}
\mehul
{Moved
up
a
few
paragraphs}

\par\endgroup
\@doanenote {7}
macro:->Where
I
have
put
a
{\ttfamily
\expandafter
\string
\csname
Large\endcsname
}
before
a
comma
in
a
correction,
it
is
just
to
make
the
comma
more
visible.
Remove
it
when
you
do
the
correction.

\par\endgroup
\@doanenote {8}
macro:->Do
you
mean
languages?
If
not,
what
environments
are
you
talking
about?
\mehul
{the
programming
environment
that
the
embedded
language
provides
as
a
library}

\par\endgroup
\@doanenote {9}
macro:->``approaching
towards
the
solution''
does
not
flow
well.
Reword.

\par\endgroup
\@doanenote {10}
macro:->\david
{This
example
isn't
as
clear
to
me
as
the
one
in
the
last
sentence.}
\mehul
{how
do
I
say
that
mathematics
can
be
translated
to
declarative
easily
in
declarative
paradigm}

\par\endgroup
\@doanenote {11}
macro:->This
preceding
phrase
is
not
a
sentence.
\mehul
{Changed}

\par\endgroup
\@doanenote {12}
macro:->I
believe
that
I
have
commented
on
the
preceding
elsewhere.
The
punctuation
to
introduce
a
list
(that
is,
the
end
of
the
phrase
immediately
preceding
the
list)
should
not
be
``,'',
but
more
likely
a
colon,
or
possibly
a
period.
There
should
also
be
punctuation
after
each
item
in
a
list.
See
item~\ref
{item:5}
in
the
to-do
list.

\par\endgroup
\@doanenote {13}
macro:->``Shortcomings''
is
one
word.
``the
road
to
a
better
future''
is
poetic,
but
too
vague.

\par\endgroup
\@doanenote {14}
macro:->Fix.

\par\endgroup
\@doanenote {15}
macro:->This
sentence
still
needs
more
crafting.

\par\endgroup
\@doanenote {16}
macro:->\david
{What
is
the
relevance
of
this
\P
{}
to
the
thesis?}\newline
\mehul
{To
explain
the
working,
not
directly
required
I
guess
but
since
\progLang
{Haskell}
is
statically
typed}\newline
\david
{Perhaps
it
is
also
relevant
that
this
requires
unification.}
\mehul
{unificaiton
is
explained
in
proto1
and
hints
have
been
dropped
at
other
places.
Do
you
want
me
to
write
a
short
snipped
here?}

\par\endgroup
\@doanenote {17}
macro:->``the
two
languages''?
As
per
the
remarks
above,
the
reader
is
not
going
to
remember
what
two
languages
we
are
talking
about.
Perhaps
just
dropping
``the''
will
fix
this.

\par\endgroup
\@doanenote {18}
macro:->This
\P
{}
needs
rewriting.
\mehul
{see
below}

\par\endgroup
\@doanenote {19}
macro:->I
do
not
understand
the
sentence
before
the
comma.

\par\endgroup
\@doanenote {20}
macro:->comma
splice.

\par\endgroup
\@doanenote {21}
macro:->This
\P
{}
seems
to
repeat
the
preceding
\P
{}.
Merge
them.
\mehul
{It
is
meant
to
be
a
replacement}

\par\endgroup
\@doanenote {22}
macro:->I
am
not
sure
which
``further
on''
you
are
referring
to.
Is
it
the
rest
of
this
\P
{},
or
is
it
Chapter~\ref
{chap:multiparadigm}?

\par\endgroup
\@doanenote {23}
macro:->I
am
not
sure
which
of
\begin
{compactitem}
\item
\textit
{run
times}
\item
\textit
{run-times}
\item
\textit
{runtimes}
\end
{compactitem}
is
correct.
What
do
basic
O/S
texts
use?
``Multilingual''
is
definitely
one
word.

\par\endgroup
\@doanenote {24}
macro:->I
think
that
this
usage
of
``reflective''
needs
some
\yyy
{common}{comment}.
Usually
\textit
{reflective}
refers
to
run-time
access
to
information
about
the
object
language
text;
what
you
are
discussing
is
compile-time
access
to
the
object
language.
?????

\par\endgroup
\@doanenote {25}
macro:->The
preceding
sentence
needs
fixing.

\par\endgroup
\@doanenote {26}
macro:->I
believe
that
Wikipedia
uses
``quasi-quotation''
rather
than
``quasi
quotation''.
Check
to
see
what
is
commonly
used.

\par\endgroup
\@doanenote {27}
macro:->``preforming''
or
``performing''?

\par\endgroup
\@doanenote {28}
macro:->\david
{Is
the
point
here
that
templating
helps,
or
what?}\newline
\mehul
{it
is
just
one
of
the
many
ways
to
bring
the
languages
together}\newline
\david
{Say
something
in
the
text.}

\par\endgroup
\@doanenote {29}
macro:->Should
this
example
be
moved
up
to
where
you
are
discussing
multi-paradigm
languages?
Wrote
something
about
\progLang
{Scala}
up
there.

\par\endgroup
\@doanenote {30}
macro:->Sentence
fragment.

\par\endgroup
\@doanenote {31}
macro:->Do
you
mean
\begin
{quote}
There
have
been
quite
a
few
attempts
to
``merge''
\xxx
{the}
two
programming
languages
from
different
programming
paradigms.
\end
{quote}
or
\begin
{quote}
There
have
been
quite
a
few
attempts
to
``merge''
\yyy
{the}{these}
two
programming
languages\yyy
{}{,
that
are}
from
different
programming
paradigms.
\end
{quote}
The
word
``the''
confuses
me
here.

\par\endgroup
\@doanenote {32}
macro:->What
is
``the
job
at
hand''?
What
is
``
a
perspective
into
the
job
at
hand''?
See
\textit
{p.}~\pageref
{sec:list-colloquialisms}.

\par\endgroup
\@doanenote {33}
macro:->Did
I
get
your
sense?

\par\endgroup
\@doanenote {34}
macro:->``exist''
or
``exists''?

\par\endgroup
\@doanenote {35}
macro:->\david
{What
does
this
point
mean?}
\mehul
{I
would
have
to
think;
I
do
not
remember.}

\par\endgroup
\@doanenote {36}
macro:->\S
~\ref
{sec:what-this-chapter:proposedWork}
says
that
this
chapter
is
about
embedding
programming
languages.
You
appear
to
have
wandered
off
topic.

\par\endgroup
\@doanenote {37}
macro:->Which
sections
above?
Use
{\ttfamily
\expandafter
\string
\csname
label\endcsname
}
and
{\ttfamily
\expandafter
\string
\csname
ref\endcsname
}
to
say
precisely
which.

\par\endgroup
\@doanenote {38}
macro:->I
am
uncertain
as
to
the
tone.
Words
like
``very'',
``mere'',
and
so
on
seem
overly
argumentative.

\par\endgroup
\@doanenote {39}
macro:->What
is
the
point
of
this
\P
{}
relative
to
the
overall
thesis?

\par\endgroup
\@doanenote {40}
macro:->Not
``would
form''.
``forms''
perhaps.
You
are
talking
about
what
\textbf
{is}
in
the
thesis.

\par\endgroup
\@doanenote {41}
macro:->\david
{Strike
this?}\newline
\mehul
{well
we/
the
library
does
some
of
this
right
?}

\par\endgroup
\@doanenote {42}
macro:->This
is
not
a
complete
sentence.

\par\endgroup
\@doanenote {43}
macro:->Have
we
defined
``eDSL''
yet?
If
not,
write
``\textsl
{embedded,
domain-specific
language
\enparen
{eDSL}}''.

\par\endgroup
\@doanenote {44}
macro:->See
\textit
{p.}~\pageref
{item:no-and},
item~\ref
{item:no-and}.

\par\endgroup
\@doanenote {45}
macro:->Reword.
I
believe
that
the
list
of
facts
that
you
are
trying
to
combine
is:
\begin
{compactitem}
\item
One
of
the
implementations
discussed
on
``Lambda
The
Ultimate''
leads
us
something.
\item
\texttt
{Mini
Prolog}
(\cite
{website:mini-prolog-hugs98})
is
one
of
the
earliest
implementations
of
\progLang
{Prolog}
in
\progLang
{Haskell}.
\item
\texttt
{Mini
Prolog}
works
with
\progLang
{Hugs
98},
an
early
dialect
of
\progLang
{Haskell}.
\end
{compactitem}

\par\endgroup
\@doanenote {46}
macro:->What
is
the
\progLang
{Prolog}
Engine?

\par\endgroup
\@doanenote {47}
macro:->\david
{What
is
list
support?
What
is
complete
list
support?
You
have
not
defined
either
of
these
terms.}\newline
\mehul
{I
forgot}.

\par\endgroup
\@doanenote {48}
macro:->``far
scarcer''?

\par\endgroup
\@doanenote {49}
macro:->Do
you
mean
that
basic
\progLang
{Prolog}
implementations
lack
modules;
or
that
\progLang
{Prolog}
lacks
modules
because
it
is
purely
declarative;
or
\dots
?

\par\endgroup
\@doanenote {50}
macro:->\david
{What
does
this
sentence
mean?
Are
you
suggesting
that
one
of
\progLang
{Prolog}'s
problems
is
that
it
is
competing
with
\progLang
{Haskell}?
}\par
\mehul
{
Well
\progLang
{Haskell}
has
a
lot
of
advantages
over
\progLang
{Prolog}
despite
being
from
the
same
paradigm
\newline
So
a
choice
has
to
be
made
for
a
declarative
language
why
not
\progLang
{Haskell}
?}

\par\endgroup
\@doanenote {51}
macro:->\david
{I
have
lost
track
of
the
general
argument
here.
What
is
the
unofficially
published
content
saying
about
\progLang
{Prolog}
here?}
\par
\mehul
{Attempting
to
do
AI
like
search
stuff
in
\progLang
{Haskell}}

\par\endgroup
\@doanenote {52}
macro:->Consider
using
``such
as''
in
place
of
``like''.

\par\endgroup
\@doanenote {53}
macro:->This
\P
{}
needs
a
lot
of
work.
I
do
not
understand
what
you
say
the
references
say.

\par\endgroup
\@doanenote {54}
macro:->I
am
not
sure
what
``the
above''
refers
to
here:
\cite
{spivey1999embedding}?.

\par\endgroup
\@doanenote {55}
macro:->What
are
``the
problems
at
hand''?

\par\endgroup
\@doanenote {56}
macro:->This
is
a
sentence
fragment.

\par\endgroup
\@doanenote {57}
macro:->I
do
not
understant
the
preceding
sentence.

\par\endgroup
\@doanenote {58}
macro:->Yet
another
metaphor
whose
meaning
I
do
not
understand
in
context.

\par\endgroup
\@doanenote {59}
macro:->There
seem
to
be
words
missing
here.

\par\endgroup
\@doanenote {60}
macro:->Be
more
precise
than
``sort
of
depicts''.

\par\endgroup
\@doanenote {61}
macro:->Other
whats?

\par\endgroup
\@doanenote {62}
macro:->Mark
this
text
up
somehow:
for
intance
surround
with
quotation
marks
if
it
is
the
title
of
a
paper,
put
in
italics
if
it
is
a
book,
and
so
on.

\par\endgroup
\@doanenote {63}
macro:->``Moving
on
to
the
other
distinct
feature
of
Prolog
is
Unification.''?
Say
it
aloud.

\par\endgroup
\@doanenote {64}
macro:->Do
you
want
to
make
the
point
here
that
\cite
{unification-fd-lib}
is
more
general
than
just
\progLang
{Prolog}?
\par
\mehul
{I
do
not
know
since
we
are
just
listing
stuff
out.}

\par\endgroup
\@doanenote {65}
macro:->How
do
these
two
sentences
relate?

\par\endgroup
\@doanenote {66}
macro:->Ample
doesn't
fit
well
here.

\par\endgroup
\@doanenote {67}
macro:->This
\P
{}
is
good.

\par\endgroup
\@doanenote {68}
macro:->Something
strange
has
happened
here!.

\par\endgroup
\@doanenote {69}
macro:->Unless
you
are
using
leaf
in
the
sense
of
page
(as
in
\textit
{overleaf}),
``a
leaf
from
each
of
the
[two]
books''
is
a
mixed
metaphor.

\par\endgroup
\@doanenote {70}
macro:->There
are
some
capitals
to
look
at
here.

\par\endgroup
\@doanenote {71}
macro:->``discussed
on''
does
not
work.

\par\endgroup
\@doanenote {72}
macro:->What
is
the
``conventional
ideology''
here?
As
defined
where?

\par\endgroup
\@doanenote {73}
macro:->Yet
another
metaphor
that
doesn't
spin
my
wheels.

\par\endgroup
\@doanenote {74}
macro:->What
is
``it''
here?

\par\endgroup
\@doanenote {75}
macro:->What
is
``it''
here?
Is
this
the
same
``it''
as
above?

\par\endgroup
\@doanenote {76}
macro:->Which
fog?

\par\endgroup
\@doanenote {77}
macro:->What
do
you
mean
by
``backdrop
of
[the]
publications''?

\par\endgroup
\@doanenote {78}
macro:->Use
``must''
in
place
of
``have
to''
where
you
can.

\par\endgroup
\@doanenote {79}
macro:->``Although''
fights
with
``but''.
Remove
one
or
the
other;
and
put
a
comma
before
``such
as''.

\par\endgroup
\@doanenote {80}
macro:->Otherwise
you
have
a
sentence
fragment.

\par\endgroup
\@doanenote {81}
macro:->The
preceding
sentence
is
awkward,
although
the
intent
is
very
good.
Here
is
one
attempt
at
rewording
it.
\par
\vspace
*{-1\baselineskip
}
\begin
{quote}
\slshape
Combining
objects
with
functions
is
important
as
object-oriented
programming
has
become
one
of
the
most
common
styles
of
programming.
Hence
even
\progLang
{Haskell}
has
a
combined
language
\enparen
{called
\progLang
{O'Haskell},
\cite
{website:ohaskell}},
though
it
last
saw
a
release
back
in
2001.
\end
{quote}

\par\endgroup
\@doanenote {82}
macro:->This
is
a
good
sentence;
but
I
believe
that
the
changes
indicated
make
it
clearer.

\par\endgroup
\@doanenote {83}
macro:->The
rewording
avoids
a
sentence
fragment.

\par\endgroup
\@doanenote {84}
macro:->``\progLang
{Nue
Prolog}''
or
``\progLang
{Neu
Prolog}''?

\par\endgroup
\@doanenote {85}
macro:->Are
we
done
with
Australia?
If
so,
insert
something
like
``\textsl
{Turning
now
to
other
languages,}''.

\par\endgroup
\@doanenote {86}
macro:->This
is
a
good
sentence
but
could
be
worded
more
clearly.
Here
is
one
attempt:
\textsl
{
We
take
a
look
at
\progLang
{Prolog}
variants:
\progLang
{Ciao}
\enparen
{\cite
{website:ciao}}
is
a
preprocessor
to
\progLang
{Prolog}
for
functional
syntax
support;
\progLang
{$\lambda
$
Prolog}
\enparen
{\cite
{website:lambda-prolog}}
aims
at
modular
higher
order
programming
with
abstract
data
types
in
a
logical
setting;
\progLang
{Babel}
\enparen
{\cite
{website:babel,moreno1992logic,
moreno1988babel}}
combines
pure
\progLang
{Prolog}
with
a
first
order
functional
notation;
\progLang
{LIFE}
\enparen
{\cite
{website:life}}
is
for
Logic,
Inheritance,
Functions
and
Equations
in
\progLang
{Prolog}
syntax
with
currying
and
other
features
like
functional
languages;
and
there
are
others
\enparen
{\cite
{bert1987lpg,malachi1984tablog}}.}

\par\endgroup
\@doanenote {87}
macro:->What
sort
of
thing?

\par\endgroup
\@doanenote {88}
macro:->Avoid
non-\textsc
{ascii}
characters.
Left
single
quote
(u\(+\)x2018)
should
be
entered
in
files
as
a
grave
accent
(u\(+\)x60),
and
right
single
quote
(u\(+\)x2019)
as
a
plain
single
quote
(0x27).
\par
Similarly,
left
double
quote
(u\(+\)x201c)
should
be
entered
as
two
grave
accents,
and
right
double
quote
as
two
single
quotes.
\par
Em-dashes
(u\(+\)x2014)---used
to
separate
thoughts
inside
sentences---are
typed
as
three
minus
signs.
\par
En-dashes
(u\(+\)x2013),
used
to
separate
numbers,
for
instance
3--5,
are
typed
as
two
minus
signs.

\par\endgroup
\@doanenote {89}
macro:->``\textit
{\progLang
{Prolog}
like}''
should
be
hyphenated
as
\text
{\progLang
{Prolog}-like}
when
used
as
an
adjective,
as
here.

\par\endgroup
\@doanenote {90}
macro:->Do
you
mean
``test''?

\par\endgroup
\@doanenote {91}
macro:->and
so
on.

\par\endgroup
\@doanenote {92}
macro:->what
does
this
reference?

\par\endgroup
\@doanenote {93}
macro:->Decide
on
a
convention
for
capitals.

\par\endgroup
\@doanenote {94}
macro:->You
might
want
to
add
words
before
some
references.
For
instance
\begin
{quote}\itshape
To
replicate
\progLang
{Prolog}
we
look
into
how
it
works
\cite
{webiste:learnprolognow}.
\end
{quote}
is
probably
better
as
\begin
{quote}\slshape
To
replicate
\progLang
{Prolog}
we
look
into
how
it
works
\enparen
{see,
for
instance,
\textup
{\cite
{webiste:learnprolognow}}}.
\end
{quote}

\par\endgroup
\@doanenote {95}
macro:->``i.e.''
is
missing
the
final
period.
Secondly,
``\textit
{where
two
terms
need
to
be
unified
that
is
searching}''
doesn't
read
well
because
it
is
missing
commas.
Check
that
latin
abbreviations
read
correctly
when
replaced
with
English
words.

\par\endgroup
\@doanenote {96}
macro:->I've
tidied
up
a
bit
here.
See
if
this
reads
more
clearly.
I've
also
removed
a
comment.\newline
(Commit
\textsf
{\bfseries
fe997de\-08bda2\-64c453\-204e97\-1a1cfd\-219457acf}).

\par\endgroup
\@doanenote {97}
macro:->``non
recursive''
is
hyphenated.

\par\endgroup
\@doanenote {98}
macro:->Why
is
unification
capitalized?

\par\endgroup
\@doanenote {99}
macro:->
\david
{Why
do
we
need
the
following
two
paragraphs?}\newline
\mehul
{To
talk
about
the
type
systems
of
the
languages}

\par\endgroup
\@doanenote {100}
macro:->Drop
the
``would''s
here.
We
\textit
{do}
need
to
define
a
\progLang
{Prolog}
type.

\par\endgroup
\@doanenote {101}
macro:->Are
you
sure
about
the
type
below?
This
seems
to
me
to
be
confusing
\progLang
{Prolog}
lists
with
\progLang
{Haskell}
lists.

\par\endgroup
\@doanenote {102}
macro:->What
do
you
mean
by
``primitives
of
the
language''?
Adopted
from
\cite
{website:understandingalgebrasfpcomplete}

\par\endgroup
\@doanenote {103}
macro:->You
have
`\textit
{FlatTerm}'
and
`"FlatTerm"'.
Why
not
\texttt
{FlatTerm}
or
better
yet
\texttt
{\csname
@backslashchar\endcsname
code\{FlatTerm\}},
where
\texttt
{\csname
@backslashchar\endcsname
code}
is
a
macro
you
define.

\par\endgroup
\@doanenote {104}
macro:->Why
do
we
explain
\textit
{kinds}?
Is
this
in
preparation
for
\texttt
{\bfseries
Functor}?
\mehul
{Well
Int,
String
etc
etc
are
kinds
in
haskell
so
a
FlatTerm
int
where
int
is
*}

\par\endgroup
\@doanenote {105}
macro:->Even
if
entered
correctly,
an
en-dash
is
not
appropriate
here.

\par\endgroup
\@doanenote {106}
macro:->\david
{Why
do
you
need
to
discuss
value
fixed
points
(\textit
{i.e.,}
\texttt
{\bfseries
fix})?
Do
you
need
them?}
\par
\mehul
{Well
not
really
but
since
we
are
talking
about
fixed
point
in
general}
\par
\david
{Get
rid
of
it.
Put
in
a
marker
if
you
want.
If
we
really
need
it,
we
can
drag
it
from
the
git
repository.}

\par\endgroup
\@doanenote {107}
macro:->The
``is''
seems
mispaced.

\par\endgroup
\@doanenote {108}
macro:->This
sentence
can
be
simplified,
I
think.
\par\endgroup
\@doanenote {109}
macro:->What
is
``\texttt
{map-reduce}''?

\par\endgroup
\@doanenote {110}
macro:->I
am
deeply
suspicious
of
the
instance
for
\texttt
{Applicative}
given.
\par
\mehul
{I
agree,
I
think
I
just
created
one
for
the
purpose
of
the
diagram.}

\par\endgroup
\@doanenote {111}
macro:->In
this
immediate
region,
I
(dgc)
removed
text
inserted
by
a
failed
push
or
pull
merge.
Check
to
see
that
it
is
correct,
or
reverse
commit
\texttt
{95804e3\dots
}.

\par\endgroup
